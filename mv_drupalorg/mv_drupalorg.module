<?php

/*
 * Implementation of hook_materialized_view_info().
 */
function mv_drupalorg_materialized_view_info() {
  $mviews = array();
  $mviews[] = _mv_drupalorg_node_by_term();
  $mviews[] = _mv_drupalorg_node_by_vocabulary();
  return $mviews;
}

/* Old:
 * SELECT DISTINCT(n.nid), n.sticky, n.title, n.created
 * FROM node n
 * INNER JOIN term_node tn0 ON n.vid = tn0.vid
 * WHERE n.status = 1 AND tn0.tid IN (77)
 * ORDER BY n.sticky DESC, n.created DESC
 * LIMIT 0, 25
 *
 * New:
 * SELECT DISTINCT entity_id, node_sticky AS sticky, node_title AS title, node_created AS created
 * FROM mv_drupalorg_node_by_term
 * WHERE node_tid IN (77)
 * ORDER BY node_sticky DESC, node_created DESC
 */

function _mv_drupalorg_node_by_term() {
  $mview = new MaterializedView('mv_drupalorg_node_by_term');
  
  // Only include published nodes.
  //$mview->addStaticFilter(new MVEntityType(), new MVEqualityOperator('node'));
  $mview->addStaticFilter(new MVNodeColumn('status'), new MVEqualityOperator(1));

  // Prepare to filter by term IDs at runtime.
  $mview->addDynamicFilter(new MVNodeTerms(), new MVEqualityOperator());  

  // Sort by stickiness, then last node activity, and finally thread creation timestamp.
  $sortset = new MVSortSet('activity');
  $sortset->addSort(new MVNodeColumn('sticky'), MV_SORT_DESCENDING);
  $sortset->addSort(new MVLastNodeActivityTimestamp(), MV_SORT_DESCENDING);
  $sortset->addSort(new MVNodeColumn('created'), MV_SORT_DESCENDING);
  $mview->addSortSet($sortset);
  
  // Sort by stickiness and then thread creation timestamp.
  $sortset = new MVSortSet('creation');
  $sortset->addSort(new MVNodeColumn('sticky'), MV_SORT_DESCENDING);
  $sortset->addSort(new MVNodeColumn('created'), MV_SORT_DESCENDING);
  $mview->addSortSet($sortset);

  $mview->addExtraColumn(new MVNodeColumn('title'));

  return $mview;
}

/* Old:
 * SELECT n.nid, n.title, l.comment_count
 * FROM node n
 * INNER JOIN term_node tn ON tn.vid = n.vid
 * INNER JOIN term_data td ON td.tid = tn.tid
 * INNER JOIN node_comment_statistics l ON n.nid = l.nid
 * WHERE n.status = 1 AND td.vid = 1
 * ORDER BY n.nid DESC LIMIT 0, 20
 */

function _mv_drupalorg_node_by_vocabulary() {
  $mview = new MaterializedView('mv_drupalorg_forum_by_comment_count');
  
  // Only include published nodes.
  $mview->addStaticFilter(new MVEntityType(), new MVEqualityOperator('node'));
  $mview->addStaticFilter(new MVNodeColumn('status'), new MVEqualityOperator(1));

  // Prepare to filter by vocabulary IDs at runtime.
  $mview->addDynamicFilter(new MVNodeVocabularies(), new MVEqualityOperator());

  // Sort by node ID, descending.
  /*
  $sortset = new MVSortSet('nid');
  $sortset->addSort(new MVNodeColumn('nid'), MV_SORT_DESCENDING);
  $mview->addSortSet($sortset);
  */
  
  // Sort by last activity.
  $sortset = new MVSortSet('last_activity');
  $sortset->addSort(new MVLastNodeActivityTimestamp(), MV_SORT_DESCENDING);
  $mview->addSortSet($sortset);

  return $mview;
}

/* SELECT r.tid, COUNT(n.nid) AS topic_count, SUM(l.comment_count) AS comment_count
 * FROM node n
 * INNER JOIN node_comment_statistics l ON n.nid = l.nid
 * INNER JOIN term_node r ON n.vid = r.vid
 * WHERE n.status = 1
 * GROUP BY r.tid
 */
