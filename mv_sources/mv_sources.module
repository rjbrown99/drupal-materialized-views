<?php

/**
 * Implementation of hook_entity_type_info().
 */
function materialized_view_entity_type_info() {
  $types = array();
  
  $types['node'] = array(
    'title' => t('Node'),
    'id_table' => 'node',
    'id_column' => 'nid',
  );
  
  return $types;
}

/**
 * Implementation of hook_nodeapi().
 */
function materialized_view_nodeapi($node, $op) {
  MVEntityCache::set('node', $node->nid, $node);
  if ($op == 'insert' || $op == 'update') {
    MVJobQueue::update('node', $node->nid);
  }
  else if ($op == 'delete') {
    MVJobQueue::delete('node', $node->nid);
  }
}

/**
 * Implementation of hook_comment().
 */
function materialized_view_comment($a1, $op) {
  $comment = (array) $a1;
  MVEntityCache::set('comment', $comment['cid'], $comment);
  switch ($op) {
    case 'insert':
    case 'update':
    case 'publish':
    case 'unpublish':
      MVJobQueue::update('comment', $comment['cid']);
      return;
    case 'delete':
      MVJobQueue::delete('comment', $comment['cid']);
      return;
  }
}

class MVNodeColumn extends MVColumn {
  protected $column_name;

  public function __construct($column_name) {
    $this->column_name = $column_name;
  }

  public function getValue($entity_type, $entity_id) {
    //$node = (array) node_load($entity_id, array(), TRUE);
    //return $node[$this->column_name];
    return db_result(db_query('SELECT ' . db_escape_table($this->column_name) . ' FROM {node} WHERE nid = %d', $entity_id));
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    if ($entity_type == 'node') {
      $changed[$entity_type] = array($entity_id);
    }
    
    return $changed;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('node', 'node');
    $field_schema = $schema['fields'][$this->column_name];

    // Override type "serial"
    if ($field_schema['type'] == 'serial') {
      $field_schema['type'] = 'int';
    }
    
    return $field_schema;
  }

  public function getName() {
    return 'node_' . $this->column_name;
  }
}

/*
 * Provides an MV data source for the latest editing or comment activity on a node.
 */
class MVLastNodeActivityTimestamp extends MVColumn {
  public function getValue($entity_type, $entity_id) {
    $timestamp = db_result(db_query('SELECT MAX(c.timestamp) FROM {comments} c WHERE c.nid = %d', $entity_id));
    if (!$timestamp) {
      $timestamp = db_result(db_query('SELECT n.changed FROM {node} n WHERE n.nid = %d', $entity_id));
    }
    return $timestamp;
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    if ($entity_type == 'node') {
      // A change to a node only affects its own value.
      $changed['node'] = array($entity_id);
    }
    else if ($entity_type == 'comment') {
      // A change to a comment affects the value of the node it's attached to.
      $changed['node'] = array(db_result(db_query('SELECT c.nid FROM {comments} c WHERE c.cid = %d', $entity_id)));
    }
    
    return $changed;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('node', 'node');
    return $schema['fields']['changed'];
  }

  public function getName() {
    return 'last_node_activity';
  }
}

/*
 * Provides an MV data source for the terms associated with a node.
 */
class MVNodeTerms extends MVColumn {
  public function getValue($entity_type, $entity_id) {
    $node = node_load($entity_id);
    $tids = array();

    // Add in a "zero" tid for as a sort of NULL.
    $tids[] = 0;

    $res = db_query('SELECT tid FROM {term_node} WHERE vid = %d', $node->vid);
    while ($row = db_fetch_array($res)) {
      $tids[] = $row['tid'];
    }
    return $tids;
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    if ($entity_type == 'node') {
      // A change to a node only affects its own value.
      $changed['node'] = array($entity_id);
    }
    else if ($entity_type == 'term') {
      // TODO: Implement change propagation for terms.
    }
    
    return $changed;
  }
  
  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('taxonomy', 'term_node');
    return $schema['fields']['tid'];
  }

  public function getName() {
    return 'term_tid';
  }
}

class MVNodeVocabularies extends MVColumn {
  public function getValue($entity_type, $entity_id) {
    $node = node_load($entity_id);
    $vids = array();
    
    // Add in a "zero" vid for as a sort of NULL.
    $vids[] = 0;
    
    $res = db_query('SELECT DISTINCT td.vid FROM {term_node} tn INNER JOIN {term_data} td ON td.tid = tn.tid WHERE tn.vid = %d', $node->vid);
    while ($row = db_fetch_array($res)) {
      $vids[] = $row['vid'];
    }
    return $vids;
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    if ($entity_type == 'node') {
      // A change to a node only affects its own value.
      $changed['node'] = array($entity_id);
    }
    else if ($entity_type == 'term') {
      // TODO: Implement change propagation for terms.
    }
    else if ($entity_type == 'vocabulary') {
      // TODO: Implement change propagation for vocabularies.
    }
    
    return $changed;
  }
  
  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('taxonomy', 'term_data');
    return $schema['fields']['vid'];
  }

  public function getName() {
    return 'term_vid';
  }
}

class MVEntityType extends MVColumn {
  public function getValue($entity_type, $entity_id) {
    return $entity_type;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('materialized_view', 'materialized_view_indexing');
    return $schema['fields']['entity_type'];
  }

  public function getName() {
    return 'entity_type';
  }
}

class MVNodeCommentStatistic extends MVColumn {
  protected $column_name;

  public function __construct($column_name) {
    $this->column_name = $column_name;
  }

  public function getValue($entity_type, $entity_id) {
    return db_result(db_query('SELECT ' . db_escape_table($this->column_name) . ' FROM {node_comment_statistics} WHERE nid = %d', $entity_id));
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    if ($entity_type == 'node') {
      // A change to a node only affects its own value.
      $changed['node'] = array($entity_id);
    }
    else if ($entity_type == 'comment') {
      $comment = MVEntityCache::get('comment', $entity_id, '_comment_load');
      
      // A change to a comment affects the value of the node it's attached to.
      $changed['node'] = array($comment['nid']);
    }
    
    return $changed;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('comment', 'node_comment_statistics');
    return $schema['fields'][$this->column_name];
  }

  public function getName() {
    return 'node_' . $this->column_name;
  }
}
