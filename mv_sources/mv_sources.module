<?php

/**
 * Implementation of hook_entity_type_info().
 */
function materialized_view_entity_type_info() {
  $types = array();

  $types['node'] = array(
    'title' => t('Node'),
    'id_table' => 'node',
    'id_column' => 'nid',
  );

  $types['activity'] = array(
    'title' => t('Activity'),
    'id_table' => 'activity',
    'id_column' => 'aid',
  );

  return $types;
}

/**
 * Implementation of hook_nodeapi().
 *
 * This function is called when any node operations take place. In this
 * case, when nodes are inserted, updated, or deleted the appropriate
 * action is taken on the Materialized View table.
 */
function materialized_view_nodeapi($node, $op) {
  MVEntityCache::set('node', $node->nid, $node);
  if ($op == 'insert' || $op == 'update') {
    MVJobQueue::update('node', $node->nid);
  }
  elseif ($op == 'delete') {
    MVJobQueue::delete('node', $node->nid);
  }
}

/**
 * Implementation of hook_comment().
 *
 * This function is called when a comment operation takes place. In this
 * case, when comments are inserted, updated, published, unpublished,
 * or deleted the appropriate action is taken on the Materialized View
 * table.
 */
function materialized_view_comment($a1, $op) {
  $comment = (array) $a1;
  MVEntityCache::set('comment', $comment['cid'], $comment);
  switch ($op) {
    case 'insert':
    case 'update':
    case 'publish':
    case 'unpublish':
      MVJobQueue::update('comment', $comment['cid']);
      return;
    case 'delete':
      MVJobQueue::delete('comment', $comment['cid']);
      return;
  }
}

/**
 * Implementation of hook_activity_message_recorded().
 *
 * This function is called immediately after an activity message has
 * been recorded to the database.
 */
function materialized_view_activity_recorded($record, $context) {
  MVEntityCache::set('activity', $record->amid, $record);
  MVJobQueue::update('activity', $record->amid);
}

/**
 * Implementation of hook_activity_message_deleted().
 *
 * This function is called immediately after an activity message has
 * been deleted from the database. Note that this hook may not be in
 * the main module yet. See http://drupal.org/node/1186544
 */
function materialized_view_activity_deleted($aids) {
  foreach ($aids as $aid) {
    // Do we need an MVEntityCache here?
    MVJobQueue::delete('activity', $aid);
  }
}

/**
 * Provides an MV data source for nodes. This provides node results
 * one column at a time rather than as a complete object. IE, you
 * can pass in a column_name of 'created' and it will return a
 * timestamp.
 */
class MVNodeColumn extends MVColumn {
  protected $column_name;

  public function __construct($column_name) {
    $this->column_name = $column_name;
  }

  public function getValue($entity_type, $entity_id) {
    $node = (array) MVEntityCache::get('node', $entity_id);
    return $node[$this->column_name];
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    if ($entity_type == 'node') {
      $changed[$entity_type] = array($entity_id);
    }

    return $changed;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('node', 'node');
    $field_schema = $schema['fields'][$this->column_name];

    // Override type "serial"
    if ($field_schema['type'] == 'serial') {
      $field_schema['type'] = 'int';
    }

    return $field_schema;
  }

  public function getName() {
    return 'node_' . $this->column_name;
  }
}

/**
 * Provides an MV data source for the latest editing or comment activity on a node.
 */
class MVLastNodeActivityTimestamp extends MVColumn {
  public function getValue($entity_type, $entity_id) {
    $timestamp = db_result(db_query('SELECT MAX(c.timestamp) FROM {comments} c WHERE c.nid = %d', $entity_id));
    if (!$timestamp) {
      $timestamp = db_result(db_query('SELECT n.changed FROM {node} n WHERE n.nid = %d', $entity_id));
    }
    return $timestamp;
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    if ($entity_type == 'node') {
      // A change to a node only affects its own value.
      $changed['node'] = array($entity_id);
    }
    elseif ($entity_type == 'comment') {
      $comment = MVEntityCache::get('comment', $entity_id, '_comment_load');

      // A change to a comment affects the value of the node it's attached to.
      $changed['node'] = array($comment['nid']);
    }

    return $changed;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('node', 'node');
    return $schema['fields']['changed'];
  }

  public function getName() {
    return 'last_node_activity';
  }
}

/**
 * Provides an MV data source for the terms associated with a node.
 */
class MVNodeTerms extends MVColumn {
  public function getValue($entity_type, $entity_id) {
    $node = node_load($entity_id);
    $tids = array();

    // Add in a "zero" tid for as a sort of NULL.
    $tids[] = 0;

    $res = db_query('SELECT tid FROM {term_node} WHERE vid = %d', $node->vid);
    while ($row = db_fetch_array($res)) {
      $tids[] = $row['tid'];
    }
    return $tids;
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    if ($entity_type == 'node') {
      // A change to a node only affects its own value.
      $changed['node'] = array($entity_id);
    }
    elseif ($entity_type == 'term') {
      // TODO: Implement change propagation for terms.
    }

    return $changed;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('taxonomy', 'term_node');
    return $schema['fields']['tid'];
  }

  public function getName() {
    return 'term_tid';
  }
}

/**
 * Provides an MV data source for the vocabularies associated with a node's terms.
 */
class MVNodeVocabularies extends MVColumn {
  public function getValue($entity_type, $entity_id) {
    $node = node_load($entity_id);
    $vids = array();

    // Add in a "zero" vid for as a sort of NULL.
    $vids[] = 0;

    $res = db_query('SELECT DISTINCT td.vid FROM {term_node} tn INNER JOIN {term_data} td ON td.tid = tn.tid WHERE tn.vid = %d', $node->vid);
    while ($row = db_fetch_array($res)) {
      $vids[] = $row['vid'];
    }
    return $vids;
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    if ($entity_type == 'node') {
      // A change to a node only affects its own value.
      $changed['node'] = array($entity_id);
    }
    elseif ($entity_type == 'term') {
      // TODO: Implement change propagation for terms.
    }
    elseif ($entity_type == 'vocabulary') {
      // TODO: Implement change propagation for vocabularies.
    }

    return $changed;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('taxonomy', 'term_data');
    return $schema['fields']['vid'];
  }

  public function getName() {
    return 'term_vid';
  }
}

/**
 * Provides an MV data source
 */
class MVEntityType extends MVColumn {
  public function getValue($entity_type, $entity_id) {
    return $entity_type;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('materialized_view', 'materialized_view_indexing');
    return $schema['fields']['entity_type'];
  }

  public function getName() {
    return 'entity_type';
  }
}

/**
 * Provides an MV data source
 */
class MVNodeCommentStatistic extends MVColumn {
  protected $column_name;

  public function __construct($column_name) {
    $this->column_name = $column_name;
  }

  public function getValue($entity_type, $entity_id) {
    return db_result(db_query('SELECT ' . db_escape_table($this->column_name) . ' FROM {node_comment_statistics} WHERE nid = %d', $entity_id));
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    if ($entity_type == 'node') {
      // A change to a node only affects its own value.
      $changed['node'] = array($entity_id);
    }
    elseif ($entity_type == 'comment') {
      $comment = MVEntityCache::get('comment', $entity_id, '_comment_load');

      // A change to a comment affects the value of the node it's attached to.
      $changed['node'] = array($comment['nid']);
    }

    return $changed;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('comment', 'node_comment_statistics');
    return $schema['fields'][$this->column_name];
  }

  public function getName() {
    return 'node_' . $this->column_name;
  }
}

/**
 * Provides an MV data source for activity.
 */
class MVActivityColumn extends MVColumn {
  protected $column_name;

  public function __construct($column_name) {
    $this->column_name = $column_name;
  }

  public function getValue($entity_type, $entity_id) {
    // In activity 1.x, there was a load function but it does not exist
    // in 2.x unless you write your own. It would be advisable, as it
    // could enable cached loading of messages and columns.
    if (function_exists('activity_load')) {
      $result = (array) MVEntityCache::get('activity', $entity_id);
      return $result[$this->column_name];
    }
    else {
      $sql = "SELECT activity.* FROM {activity} activity WHERE activity.aid = '%d'";
      $result = db_fetch_array(db_query($sql, $entity_id));
      return $result[$this->column_name];
    }
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    // A change to an activity record only affects its own value.
    if ($entity_type == 'activity') {
      $changed[$entity_type] = array($entity_id);
    }

    return $changed;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('activity', 'activity');
    return $schema['fields'][$this->column_name];
  }

  public function getName() {
    return 'activity_' . $this->column_name;
  }
}

/**
 * Provides an MV data source.
 *
 * Given an $entity_id (aid), load and return the user roles for that activity actor.
 * Enables filtering of activity messages based on user role. For example, you could
 * add a dynamic filter to exclude messages from role ID 8 or whatever.
 */
class MVActivityUserRoles extends MVColumn {
  public function getValue($entity_type, $entity_id) {
    $roles = array();
    $sql = "SELECT ur.rid FROM {users_roles} ur INNER JOIN {activity} activity ON ur.uid = activity.uid WHERE activity.aid = '%d'";
    $result = db_query($sql, $entity_id);
    while ($row = db_fetch_array($result)) {
      $roles[] = $row['rid']; 
    }
    return $roles;
  }

  public function getChangeMapping($entity_type, $entity_id) {
    $changed = array();

    if ($entity_type == 'activity') {
      $changed[$entity_type] = array($entity_id);
    }

    return $changed;
  }

  public function getSchema() {
    $schema = drupal_get_schema_unprocessed('user', 'users_roles');
    return $schema['fields']['rid'];
  }

  public function getName() {
    return 'activity_roles_rid';
  }
}
